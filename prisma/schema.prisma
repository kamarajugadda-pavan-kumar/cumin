// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  password       String
  assignedIssues Issue[]  @relation("IssueAssignees")
  reportedIssues Issue[]  @relation("IssueReporters")
  Sprint         Sprint[]
  Team           Team?    @relation(fields: [teamId], references: [id])
  teamId         String?
}

enum IssueType {
  EPIC
  USER_STORY
  BUG
  TASK
  SUBTASK
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
}

model Issue {
  id                 Int       @id @default(autoincrement())
  type               IssueType
  summary            String
  description        String
  status             Status
  assigneeId         String
  assignee           User      @relation("IssueAssignees", fields: [assigneeId], references: [id])
  startDate          DateTime?
  endDate            DateTime?
  reporterId         String
  reporter           User      @relation("IssueReporters", fields: [reporterId], references: [id])
  childIssues        Issue[]   @relation("IssueHierarchy")
  parentId           Int?
  parent             Issue?    @relation("IssueHierarchy", fields: [parentId], references: [id])
  sprint             String?
  storyPointEstimate Int?
  labels             Label[]
  Sprint             Sprint?   @relation(fields: [sprintId], references: [id])
  sprintId           String?
}

model Label {
  id      String @id @default(uuid())
  name    String @unique
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId Int
}

model Sprint {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  status    String
  issues    Issue[]
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
}

model Team {
  id       String @id @default(uuid())
  name     String
  memberId String
  members  User[]
}
